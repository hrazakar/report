package report;

import java.util.*;

/**
*** Status Codes
**/

public class StatusCodes
{

 // ------------------------------------------------------------------------
 // ------------------------------------------------------------------------
 // -- below should match GTC StatusCodes

 /* Custom digital-input indices for representing ignition state (must not be < 99) */
 // -- ignition expressed as status codes: STATUS_IGNITION_ON/STATUS_IGNITION_OFF
 public static final int IGNITION_INPUT_INDEX        =  99; // -- do not change
 // -- ignition simulated as status codes: STATUS_MOTION_START/STATUS_MOTION_STOP
 public static final int IGNITION_START_STOP         = 200; // -- do not change

//----------------------------------------------------------------------------
//Reserved status codes: [E0-00 through FF-FF]
//Groups:
//   0xF0..  - Generic
//   0xF1..  - Motion
//   0xF2..  - Geofence
//   0xF4..  - Digital input/output
//   0xF6..  - Sensor input
//   0xF7..  - Temperature input
//   0xF9..  - OBC/J1708
//   0xFD..  - Device status
//----------------------------------------------------------------------------

 public static final int STATUS_IGNORE               = -1;

//----------------------------------------------------------------------------
//Reserved: 0x0000 to 0x0FFF
//No status code: 0x0000

 public static final int STATUS_NONE                 = 0x0000;

//----------------------------------------------------------------------------
//Available: 0x1000 to 0xCFFF
 public static final int STATUS_1000                 = 0x1000;   //  4096
 // ...
 public static final int STATUS_CFFF                 = 0xCFFF;   // 53247

//----------------------------------------------------------------------------
//Reserved: 0xD000 to 0xEFFF

 // Reserved default event mapped codes (CalAmp)
 public static final int STATUS_E000                 = 0xE000;
 // ...
 public static final int STATUS_E0FF                 = 0xE0FF;

 // Garmin GFMI interface [0xE100 - 0xE1FF]
 public static final int STATUS_GFMI_CMD_03          = 0xE103;   // 57603 send non-ack message
 public static final int STATUS_GFMI_CMD_04          = 0xE104;   // 57604 send ack message
 public static final int STATUS_GFMI_CMD_05          = 0xE105;   // 57605 send answerable message
 public static final int STATUS_GFMI_CMD_06          = 0xE106;   // 57606 send stop location
 public static final int STATUS_GFMI_CMD_08          = 0xE108;   // 57608 request stop ETA
 public static final int STATUS_GFMI_CMD_09          = 0xE109;   // 57609 set auto arrival criteria
 // Garmin link
 public static final int STATUS_GFMI_LINK_OFF        = 0xE110;   // 57616 GFMI Link lost
 public static final int STATUS_GFMI_LINK_ON         = 0xE111;   // 57617 GFMI Link established
 // Garmin ACK
 public static final int STATUS_GFMI_ACK             = 0xE1A0;   // 57760 received ACK
 public static final int STATUS_GFMI_MESSAGE         = 0xE1B1;   // 57777 received message
 public static final int STATUS_GFMI_MESSAGE_ACK     = 0xE1B2;   // 57778 received message ACK
 // Garmin Stop Status change
 public static final int STATUS_GFMI_STOP_STATUS_1   = 0xE1C1;   // 57793 stop status
 public static final int STATUS_GFMI_STOP_STATUS_2   = 0xE1C2;   // 57794 stop status
 public static final int STATUS_GFMI_STOP_STATUS_3   = 0xE1C3;   // 57795 stop status
 public static final int STATUS_GFMI_STOP_STATUS_4   = 0xE1C4;   // 57796 stop status
 // Garmin ETA
 public static final int STATUS_GFMI_ETA             = 0xE1C9;   // 57801 ETA
 // Garmin Driver
 public static final int STATUS_GFMI_DRIVER_ID       = 0xE1D1;   // 57809 driver id
 public static final int STATUS_GFMI_DRIVER_STATUS   = 0xE1D3;   // 57811 driver status

//----------------------------------------------------------------------------
//Generic codes: 0xF000 to 0xF0FF

 public static final int STATUS_INITIALIZED          = 0xF010;   // 61456
 // Description:
 //      General Status/Location information (event generated by some
 //      initialization function performed by the device).

 public static final int STATUS_LOCATION             = 0xF020;   // 61472
 public static final int STATUS_LOCATION_1           = 0xF021;   // 61473
 public static final int STATUS_LOCATION_2           = 0xF022;   // 61474
 public static final int STATUS_LOCATION_3           = 0xF023;   // 61475
 public static final int STATUS_LOCATION_4           = 0xF024;   // 61476
 // Description:
 //      General Status/Location event, typically based on a time-interval.  
 //      This status code indicates no more than just the location of the 
 //      device at a particular time.

 public static final int STATUS_LAST_LOCATION        = 0xF025;   // 61477
 // Description:
 //      General Status/Location event.  This status code indicates
 //      the last known location of the device (GPS may not be current)

 public static final int STATUS_CELL_LOCATION        = 0xF029;   // 61481
 // Description:
 //      Indicates a location generated by analyzing the MCC/MNC/LAC/CID
 //      information retrieve from the cell tower.

 public static final int STATUS_DISTANCE             = 0xF02C;   // 61484
 public static final int STATUS_DISTANCE_1           = 0xF02D;   // 61485
 public static final int STATUS_DISTANCE_2           = 0xF02E;   // 61486
 // Description:
 //      General Status/Location event, typically based on a distance-interval.  
 //      This status code indicates no more than just the location of the 
 //      device at a particular distance-interval.

 public static final int STATUS_WAYMARK_0            = 0xF030;   // 61488
 public static final int STATUS_WAYMARK_1            = 0xF031;   // 61489
 public static final int STATUS_WAYMARK_2            = 0xF032;   // 61490
 public static final int STATUS_WAYMARK_3            = 0xF033;   // 61491
 public static final int STATUS_WAYMARK_4            = 0xF034;   // 61492
 public static final int STATUS_WAYMARK_5            = 0xF035;   // 61493
 public static final int STATUS_WAYMARK_6            = 0xF036;   // 61494
 public static final int STATUS_WAYMARK_7            = 0xF037;   // 61495
 public static final int STATUS_WAYMARK_8            = 0xF038;   // 61496
 public static final int STATUS_WAYMARK_9            = 0xF039;   // 61497
 // Description:
 //      General Status/Location information (event generated by manual user
 //      intervention at the device. ie. By pressing a 'Waymark' button).

 public static final int STATUS_QUERY                = 0xF040;   // 61504
 // Description:
 //      General Status/Location information (event generated by 'query'
 //      from the server).

 public static final int STATUS_NOTIFY               = 0xF044;   // 61508
 // Description:
 //      General notification triggered by device operator

 public static final int STATUS_LOG                  = 0xF049;   // 61513
 // Description:
 //      General log indicator from device

 public static final int STATUS_SAMPLE_0             = 0xF050;   // 61520
 public static final int STATUS_SAMPLE_1             = 0xF051;   // 61521
 public static final int STATUS_SAMPLE_2             = 0xF052;   // 61522
 // Description:
 //      General sample triggered by device operator

 public static final int STATUS_HEARTBEAT            = 0xF060;   // 61536
 // Description:
 //      General heartbeat/keep-alive event

 public static final int STATUS_GPS_FIRST_FIX        = 0xF06A;   // 61546
 // Description:
 //      GPS first fix

 public static final int STATUS_POI_0                = 0xF070;   // 61552
 public static final int STATUS_POI_1                = 0xF071;   // 61553
 public static final int STATUS_POI_2                = 0xF072;   // 61554
 public static final int STATUS_POI_3                = 0xF073;   // 61555
 public static final int STATUS_POI_4                = 0xF074;   // 61556
 // Description:
 //      General Point-Of-Interest location (event generated by manual user
 //      intervention at the device. ie. By pressing a 'Waymark' button).

 public static final int STATUS_DATA_MESSAGE_0       = 0xF080;   // 61568
 public static final int STATUS_DATA_MESSAGE_1       = 0xF081;   // 61569
 public static final int STATUS_DATA_MESSAGE_2       = 0xF082;   // 61570
 // Description:
 //      General data message from device

 public static final int STATUS_VOICE                = 0xF090;   // 61584
 // Description:
 //      General voice indicator

 public static final int STATUS_VOICE_OUTGOING       = 0xF094;   // 61588
 // Description:
 //      General outgoing voice indicator

 public static final int STATUS_VOICE_INCOMING       = 0xF098;   // 61592
 // Description:
 //      General outgoing voice indicator

 public static final int STATUS_RFID_TAG_0           = 0xF0A0;   // 61600
 public static final int STATUS_RFID_TAG_1           = 0xF0A1;   // 61601
 public static final int STATUS_RFID_TAG_2           = 0xF0A2;   // 61602
 // Description:
 //      General RFID events

//----------------------------------------------------------------------------
//Motion codes: 0xF100 to 0xF1FF
//(motion related status codes - typically while ignition is on)

 public static final int STATUS_MOTION_START         = 0xF111;   // 61713
 // Description:
 //      Device start of motion

 public static final int STATUS_MOTION_EN_ROUTE      = 0xF112;   // 61714
 public static final int STATUS_MOTION_IN_MOTION     = STATUS_MOTION_EN_ROUTE;
 // Description:
 //      Device in-motion interval

 public static final int STATUS_MOTION_STOP          = 0xF113;   // 61715
 // Description:
 //      Device stopped motion

 public static final int STATUS_MOTION_DORMANT       = 0xF114;   // 61716
 // Description:
 //      Device dormant interval (ie. not moving)

 public static final int STATUS_MOTION_STOPPED       = 0xF115;   // 61717
 // Description:
 //      Alternate to Dormant (ie. not moving)

 public static final int STATUS_MOTION_IDLE          = 0xF116;   // 61718
 // Description:
 //      Device idle interval (ie. not moving, but engine may still be on)

 public static final int STATUS_MOTION_IDLE_END      = 0xF117;   // 61719
 // Description:
 //      Use by some devices that send an "end-of-idle" event

 public static final int STATUS_EXCESS_IDLE          = 0xF118;   // 61720
 public static final int STATUS_MOTION_EXCESS_IDLE   = STATUS_EXCESS_IDLE;
 // Description:
 //      Device exceeded idle threashold

 public static final int STATUS_MOTION_OVER_SPEED_1  = 0xF11A;   // 61722
 public static final int STATUS_MOTION_EXCESS_SPEED  = STATUS_MOTION_OVER_SPEED_1;
 // Description:
 //      Device exceeded preset speed limit #1
 // OBSOLETE:
 //      Use STATUS_SPEEDING_LIMIT_1

 public static final int STATUS_MOTION_OVER_SPEED_2  = 0xF11B;   // 61723
 // Description:
 //      Device exceeded preset speed limit #2
 // OBSOLETE:
 //      Use STATUS_SPEEDING_LIMIT_2

 public static final int STATUS_MOTION_MOVING        = 0xF11C;   // 61724
 // Description:
 //      Device is moving
 // Notes:
 //      - This status code may be used to indicating that the device was moving
 //      at the time the event was generated. It is typically not associated
 //      with the status codes STATUS_MOTION_START, STATUS_MOTION_STOP, and  
 //      STATUS_MOTION_IN_MOTION, and may be used independently of these codes.
 //      - This status code is typically used for devices that need to periodically
 //      report that they are moving, apart from the standard start/stop/in-motion
 //      events.

 public static final int STATUS_MOTION_STOP_PENDING  = 0xF11D;   // 61725
 // Description:
 //      Motion changed to stop, waiting for official "Stop" event

 public static final int STATUS_MOTION_CHANGE        = 0xF11E;   // 61726
 // Description:
 //      Motion state change (from moving to stopped, or stopped to moving)

 public static final int STATUS_MOTION_HEADING       = 0xF11F;   // 61727
 // Description:
 //      Device motion changed direction/heading

 public static final int STATUS_MOTION_ACCELEROMETER = 0xF120;   // 61728
 // Description:
 //      Device motion detected due to accelerometer

 public static final int STATUS_MOTION_ACCELERATION  = 0xF123;   // 61731
 // Description:
 //      Device motion acceleration change

 public static final int STATUS_MOTION_DECELERATION  = 0xF126;   // 61734
 // Description:
 //      Device motion acceleration change

 public static final int STATUS_MOTION_SPEED_RECOVER = 0xF12A;   // 61738
 // Description:
 //      Recover from excess speed

 public static final int STATUS_ODOM_0               = 0xF130;   // 61744
 public static final int STATUS_ODOM_1               = 0xF131;
 public static final int STATUS_ODOM_2               = 0xF132;
 public static final int STATUS_ODOM_3               = 0xF133;
 public static final int STATUS_ODOM_4               = 0xF134;
 public static final int STATUS_ODOM_5               = 0xF135;
 public static final int STATUS_ODOM_6               = 0xF136;
 public static final int STATUS_ODOM_7               = 0xF137;   // 61751
 // Description:
 //      Odometer value
 // Notes:
 //      The odometer limit is provided by property PROP_ODOMETER_#_LIMIT

 public static final int STATUS_ODOM_LIMIT_0         = 0xF140;   // 61760
 public static final int STATUS_ODOM_LIMIT_1         = 0xF141;
 public static final int STATUS_ODOM_LIMIT_2         = 0xF142;
 public static final int STATUS_ODOM_LIMIT_3         = 0xF143;
 public static final int STATUS_ODOM_LIMIT_4         = 0xF144;
 public static final int STATUS_ODOM_LIMIT_5         = 0xF145;
 public static final int STATUS_ODOM_LIMIT_6         = 0xF146;
 public static final int STATUS_ODOM_LIMIT_7         = 0xF147;   // 61767
 // Description:
 //      Odometer has exceeded a set limit

 public static final int STATUS_MAINTENANCE_0        = 0xF150;   // 61776
 public static final int STATUS_MAINTENANCE_1        = 0xF151;   // 61777
 public static final int STATUS_MAINTENANCE_2        = 0xF152;   // 61778
 public static final int STATUS_MAINTENANCE_3        = 0xF153;   // 61779
 public static final int STATUS_MAINTENANCE_4        = 0xF154;   // 61780
 // Description:
 //      Maintenance/service interval

 public static final int STATUS_SPEEDING_BEGIN       = 0xF160;   // 61792
 public static final int STATUS_SPEEDING_LIMIT_1     = 0xF161;   // 61793
 public static final int STATUS_SPEEDING_LIMIT_2     = 0xF162;   // 61794
 public static final int STATUS_SPEEDING_LIMIT_3     = 0xF163;   // 61795
 public static final int STATUS_SPEEDING_LIMIT_4     = 0xF164;   // 61796
 public static final int STATUS_SPEEDING_END         = 0xF16F;   // 61807
 // Description:
 //      Speeding profile

 public static final int STATUS_TRACK_START          = 0xF181;   // 61825
 // Description:
 //      Tracking start

 public static final int STATUS_TRACK_LOCATION       = 0xF182;   // 61826
 // Description:
 //      Periodic location event while tracking

 public static final int STATUS_TRACK_STOP           = 0xF183;   // 61827
 // Description:
 //      Tracking stop

 public static final int STATUS_JOB_START            = 0xF187;   // 61831
 // Description:
 //      Job start

 public static final int STATUS_JOB_STOP             = 0xF188;   // 61832
 // Description:
 //      Job stop

//----------------------------------------------------------------------------
//Geofence: 0xF200 to 0xF2FF

 public static final int STATUS_GEOFENCE_ARRIVE      = 0xF210;   // 61968
 // Description:
 //      Device arrived at geofence/geozone

 public static final int STATUS_CORRIDOR_ARRIVE      = 0xF213;   // 61971
 // Description:
 //      Device entered GeoCorridor

 public static final int STATUS_JOB_ARRIVE           = 0xF215;   // 61973
 // Description:
 //      Device arrived at job-site (typically driver entered)

 public static final int STATUS_PROXIMITY_ARRIVE     = 0xF219;   // 61977
 // Description:
 //      Device has entered the proximity of another asset

 public static final int STATUS_GEOFENCE_DEPART      = 0xF230;   // 62000
 // Description:
 //      Device departed geofence/geozone

 public static final int STATUS_CORRIDOR_DEPART      = 0xF233;   // 62003
 // Description:
 //      Device exited GeoCorridor (alternate for STATUS_CORRIDOR_VIOLATION)

 public static final int STATUS_JOB_DEPART           = 0xF235;   // 62005
 // Description:
 //      Device departed job-site (typically driver entered)

 public static final int STATUS_PROXIMITY_DEPART     = 0xF239;   // 62009
 // Description:
 //      Device has left the proximity of another asset

 public static final int STATUS_GEOFENCE_VIOLATION   = 0xF250;   // 62032
 // Description:
 //      Geofence violation

 public static final int STATUS_CORRIDOR_VIOLATION   = 0xF258;   // 62040
 // Description:
 //      GeoCorridor violation

 public static final int STATUS_GEOFENCE_ACTIVE      = 0xF270;   // 62064
 // Description:
 //      Geofence now active

 public static final int STATUS_CORRIDOR_ACTIVE      = 0xF278;   // 62072
 // Description:
 //      GeoCorridor now active

 public static final int STATUS_GEOFENCE_INACTIVE    = 0xF280;   // 62080
 // Description:
 //      Geofence now inactive

 public static final int STATUS_CORRIDOR_INACTIVE    = 0xF288;   // 62088
 // Description:
 //      Geofence now inactive

 public static final int STATUS_GEOBOUNDS_ENTER      = 0xF2A0;   // 62112
 // Description:
 //      Device has entered a geo-boundary (ie state/province)

 public static final int STATUS_GEOBOUNDS_EXIT       = 0xF2B0;   // 62128
 // Description:
 //      Device has exited a geo-boundary (ie state/province)

 public static final int STATUS_PARKED               = 0xF2C0;   // 62144
 // Description:
 //      Device has parked

 public static final int STATUS_EXCESS_PARK          = 0xF2C3;   // 62147
 // Description:
 //      Device has exceeded a parked threshold

 public static final int STATUS_UNPARKED             = 0xF2C6;   // 62150
 // Description:
 //      Device has unparked

 public static final int STATUS_ALTITUDE_VIOLATION   = 0xF2D0;   // 62160
 // Description:
 //      Altitude violation

//----------------------------------------------------------------------------
//Digital input/output (state change): 0xF400 to 0xF4FF

 public static final int STATUS_INPUT_STATE          = 0xF400;   // 62464
 // Description:
 //      Current input state change

 public static final int STATUS_IGNITION_ON          = 0xF401;   // 62465
 // Description:
 //      Ignition turned ON
 // Notes:
 //      - This status code may be used to indicate that the ignition input
 //      turned ON.

 public static final int STATUS_INPUT_ON             = 0xF402;   // 62466
 // Description:
 //      Input turned ON

 public static final int STATUS_IGNITION_OFF         = 0xF403;   // 62467
 // Description:
 //      Ignition turned OFF
 // Notes:
 //      - This status code may be used to indicate that the ignition input
 //      turned OFF.

 public static final int STATUS_INPUT_OFF            = 0xF404;   // 62468
 // Description:
 //      Input turned OFF
 // Notes:
 //      - This status code may be used to indicate that an arbitrary input
 //      'thing' turned OFF, and the 'thing' can be identified by the 'Input ID'.
 //      This 'ID' can also represent the index of a digital input.

 public static final int STATUS_OUTPUT_STATE         = 0xF406;   // 62470
 // Description:
 //      Current output ON state (bitmask)

 public static final int STATUS_OUTPUT_ON            = 0xF408;   // 62472
 // Description:
 //      Output turned ON
 // Notes:
 //      - This status code may be used to indicate that an arbitrary output
 //      'thing' turned ON, and the 'thing' can be identified by the 'Output ID'.
 //      This 'ID' can also represent the index of a digital output.

 public static final int STATUS_OUTPUT_OFF           = 0xF40A;   // 62474
 // Description:
 //      Output turned OFF
 // Notes:
 //      - This status code may be used to indicate that an arbitrary output
 //      'thing' turned OFF, and the 'thing' can be identified by the 'Output ID'.
 //      This 'ID' can also represent the index of a digital output.

 public static final int STATUS_ENGINE_START         = 0xF40C;   // 62476
 // Description:
 //      Engine started
 // Notes:
 //      - This status code may be used to specifically indicate that the engine
 //      has been started.  This may be different from "Ignition On", if the
 //      STATUS_IGNITION_ON also indicates when only the "accessory" loop of
 //      the ignition state is on.

 public static final int STATUS_ENGINE_STOP          = 0xF40D;   // 62477
 // Description:
 //      Engine stopped
 // Notes:
 //      - This status code may be used to specifically indicate that the engine
 //      has been stopped.  This may be different from "Ignition Off", if the
 //      STATUS_IGNITION_OFF also indicates when only the "accessory" loop of
 //      the ignition state is off.

 public static final int STATUS_INPUT_ON_00          = 0xF420;   // 62496
 public static final int STATUS_INPUT_ON_01          = 0xF421;   // 62497
 public static final int STATUS_INPUT_ON_02          = 0xF422;   // 62498
 public static final int STATUS_INPUT_ON_03          = 0xF423;   // 62499
 public static final int STATUS_INPUT_ON_04          = 0xF424;   // 62500
 public static final int STATUS_INPUT_ON_05          = 0xF425;   // 62501
 public static final int STATUS_INPUT_ON_06          = 0xF426;   // 62502
 public static final int STATUS_INPUT_ON_07          = 0xF427;   // 62503
 public static final int STATUS_INPUT_ON_08          = 0xF428;   // 62504
 public static final int STATUS_INPUT_ON_09          = 0xF429;   // 62505
 public static final int STATUS_INPUT_ON_10          = 0xF42A;   // 62406
 public static final int STATUS_INPUT_ON_11          = 0xF42B;   // 62407
 public static final int STATUS_INPUT_ON_12          = 0xF42C;   // 62408
 public static final int STATUS_INPUT_ON_13          = 0xF42D;   // 62409
 public static final int STATUS_INPUT_ON_14          = 0xF42E;   // 62510
 public static final int STATUS_INPUT_ON_15          = 0xF42F;   // 62511
 public static final int STATUS_INPUT_ON_16          = 0xF430;   // 62512
 public static final int STATUS_INPUT_ON_17          = 0xF431;   // 62513
 public static final int STATUS_INPUT_ON_18          = 0xF432;   // 62514
 public static final int STATUS_INPUT_ON_19          = 0xF433;   // 62515
 public static final int STATUS_INPUT_ON_20          = 0xF434;   // 62516
 public static final int STATUS_INPUT_ON_21          = 0xF435;   // 62517
 public static final int STATUS_INPUT_ON_22          = 0xF436;   // 62518
 public static final int STATUS_INPUT_ON_23          = 0xF437;   // 62519
 public static final int STATUS_INPUT_ON_24          = 0xF438;   // 62520
 public static final int STATUS_INPUT_ON_25          = 0xF439;   // 62521
 public static final int STATUS_INPUT_ON_26          = 0xF43A;   // 62522
 // Description:
 //      Digital input state changed to ON

 public static final int STATUS_INPUT_OFF_00         = 0xF440;   // 62528
 public static final int STATUS_INPUT_OFF_01         = 0xF441;   // 62529
 public static final int STATUS_INPUT_OFF_02         = 0xF442;   // 62530
 public static final int STATUS_INPUT_OFF_03         = 0xF443;   // 62531
 public static final int STATUS_INPUT_OFF_04         = 0xF444;   // 62532
 public static final int STATUS_INPUT_OFF_05         = 0xF445;   // 62533
 public static final int STATUS_INPUT_OFF_06         = 0xF446;   // 62534
 public static final int STATUS_INPUT_OFF_07         = 0xF447;   // 62535
 public static final int STATUS_INPUT_OFF_08         = 0xF448;   // 62536
 public static final int STATUS_INPUT_OFF_09         = 0xF449;   // 62537
 public static final int STATUS_INPUT_OFF_10         = 0xF44A;   // 62538
 public static final int STATUS_INPUT_OFF_11         = 0xF44B;   // 62539
 public static final int STATUS_INPUT_OFF_12         = 0xF44C;   // 62540
 public static final int STATUS_INPUT_OFF_13         = 0xF44D;   // 62541
 public static final int STATUS_INPUT_OFF_14         = 0xF44E;   // 62542
 public static final int STATUS_INPUT_OFF_15         = 0xF44F;   // 62543
 public static final int STATUS_INPUT_OFF_16         = 0xF450;   // 62544
 public static final int STATUS_INPUT_OFF_17         = 0xF451;   // 62545
 public static final int STATUS_INPUT_OFF_18         = 0xF452;   // 62546
 public static final int STATUS_INPUT_OFF_19         = 0xF453;   // 62547
 public static final int STATUS_INPUT_OFF_20         = 0xF454;   // 62548
 public static final int STATUS_INPUT_OFF_21         = 0xF455;   // 62549
 public static final int STATUS_INPUT_OFF_22         = 0xF456;   // 62550
 public static final int STATUS_INPUT_OFF_23         = 0xF457;   // 62551
 public static final int STATUS_INPUT_OFF_24         = 0xF458;   // 62552
 public static final int STATUS_INPUT_OFF_25         = 0xF459;   // 62553
 public static final int STATUS_INPUT_OFF_26         = 0xF45A;   // 62554
 // Description:
 //      Digital input state changed to OFF

 public static final int STATUS_OUTPUT_ON_00         = 0xF460;   // 62560
 public static final int STATUS_OUTPUT_ON_01         = 0xF461;
 public static final int STATUS_OUTPUT_ON_02         = 0xF462;
 public static final int STATUS_OUTPUT_ON_03         = 0xF463;
 public static final int STATUS_OUTPUT_ON_04         = 0xF464;
 public static final int STATUS_OUTPUT_ON_05         = 0xF465;
 public static final int STATUS_OUTPUT_ON_06         = 0xF466;
 public static final int STATUS_OUTPUT_ON_07         = 0xF467;
 public static final int STATUS_OUTPUT_ON_08         = 0xF468;
 public static final int STATUS_OUTPUT_ON_09         = 0xF469;   // 62569
 // Description:
 //      Digital output state set to ON
 //      0xFA6A through 0xFA6F reserved

 public static final int STATUS_OUTPUT_OFF_00        = 0xF480;   // 62592
 public static final int STATUS_OUTPUT_OFF_01        = 0xF481;
 public static final int STATUS_OUTPUT_OFF_02        = 0xF482;
 public static final int STATUS_OUTPUT_OFF_03        = 0xF483;
 public static final int STATUS_OUTPUT_OFF_04        = 0xF484;
 public static final int STATUS_OUTPUT_OFF_05        = 0xF485;
 public static final int STATUS_OUTPUT_OFF_06        = 0xF486;
 public static final int STATUS_OUTPUT_OFF_07        = 0xF487;
 public static final int STATUS_OUTPUT_OFF_08        = 0xF488;
 public static final int STATUS_OUTPUT_OFF_09        = 0xF489;   // 62601
 // Description:
 //      Digital output state set to OFF
 //      0xFA8A through 0xFA8F reserved

 public static final int STATUS_ELAPSED_00           = 0xF4A0;   // 62624
 public static final int STATUS_ELAPSED_01           = 0xF4A1;
 public static final int STATUS_ELAPSED_02           = 0xF4A2;
 public static final int STATUS_ELAPSED_03           = 0xF4A3;
 public static final int STATUS_ELAPSED_04           = 0xF4A4;
 public static final int STATUS_ELAPSED_05           = 0xF4A5;
 public static final int STATUS_ELAPSED_06           = 0xF4A6;
 public static final int STATUS_ELAPSED_07           = 0xF4A7;   // 62631
 // Description:
 //      Elapsed time
 //      0xFAA8 through 0xFAAF reserved

 public static final int STATUS_ELAPSED_LIMIT_00     = 0xF4B0;   // 62640
 public static final int STATUS_ELAPSED_LIMIT_01     = 0xF4B1;   // 62641
 public static final int STATUS_ELAPSED_LIMIT_02     = 0xF4B2;   // 62642
 public static final int STATUS_ELAPSED_LIMIT_03     = 0xF4B3;   // 62643
 public static final int STATUS_ELAPSED_LIMIT_04     = 0xF4B4;   // 62644
 public static final int STATUS_ELAPSED_LIMIT_05     = 0xF4B5;   // 62645
 public static final int STATUS_ELAPSED_LIMIT_06     = 0xF4B6;   // 62646
 public static final int STATUS_ELAPSED_LIMIT_07     = 0xF4B7;   // 62647
 // Description:
 //      Elapsed timer has exceeded a set limit
 //      0xFAB8 through 0xFABF reserved

 public static final int STATUS_DOOR_OPEN_0          = 0xF4D0;   // 62672
 public static final int STATUS_DOOR_OPEN_1          = 0xF4D1;   // 62673
 public static final int STATUS_DOOR_OPEN_2          = 0xF4D2;   // 62674
 public static final int STATUS_DOOR_OPEN_3          = 0xF4D3;   // 62675
 public static final int STATUS_DOOR_OPEN_4          = 0xF4D4;   // 62676
 public static final int STATUS_DOOR_OPEN_5          = 0xF4D5;   // 62677
 // Description:
 //      Door open
 // Notes:
 //      - This status code may be used to specifically indicate that a door
 //      has been opened.  (alternatively a STATUS_INPUT_ON_xx status code
 //      could be used, with the description changed to "door open").

 public static final int STATUS_SEATBELT_ON_0        = 0xF4DA;   // 62682
 public static final int STATUS_SEATBELT_ON_1        = 0xF4DB;   // 62683
 public static final int STATUS_SEATBELT_ON_2        = 0xF4DC;   // 62684
 public static final int STATUS_SEATBELT_ON_3        = 0xF4DD;   // 62685
 // Description:
 //      Setbelt on/latched
 // Notes:
 //      - This status code may be used to specifically indicate that a seatbelt
 //      has been latched.  (alternatively a STATUS_INPUT_ON_xx status code
 //      could be used, with the description changed to "setbelt on").

 public static final int STATUS_DOOR_CLOSE_0         = 0xF4E0;   // 62688
 public static final int STATUS_DOOR_CLOSE_1         = 0xF4E1;   // 62689
 public static final int STATUS_DOOR_CLOSE_2         = 0xF4E2;   // 62690
 public static final int STATUS_DOOR_CLOSE_3         = 0xF4E3;   // 62691
 public static final int STATUS_DOOR_CLOSE_4         = 0xF4E4;   // 62692
 public static final int STATUS_DOOR_CLOSE_5         = 0xF4E5;   // 62693
 // Description:
 //      Door closed
 // Notes:
 //      - This status code may be used to specifically indicate that a door
 //      has been closed.  (alternatively a STATUS_INPUT_ON_xx status code
 //      could be used, with the description changed to "door closed").

 public static final int STATUS_SEATBELT_OFF_0       = 0xF4EA;   // 62698
 public static final int STATUS_SEATBELT_OFF_1       = 0xF4EB;   // 62699
 public static final int STATUS_SEATBELT_OFF_2       = 0xF4EC;   // 62700
 public static final int STATUS_SEATBELT_OFF_3       = 0xF4ED;   // 62701
 // Description:
 //      Setbelt on/latched
 // Notes:
 //      - This status code may be used to specifically indicate that a seatbelt
 //      has been latched.  (alternatively a STATUS_INPUT_ON_xx status code
 //      could be used, with the description changed to "seatbelt on").

//----------------------------------------------------------------------------
//Analog/etc sensor values (extra data): 0xF600 to 0xF6FF

 public static final int STATUS_ANALOG_0             = 0xF600;   // 62976
 public static final int STATUS_ANALOG_1             = 0xF601;
 public static final int STATUS_ANALOG_2             = 0xF602;
 public static final int STATUS_ANALOG_3             = 0xF603;
 public static final int STATUS_ANALOG_4             = 0xF604;
 public static final int STATUS_ANALOG_5             = 0xF605;
 public static final int STATUS_ANALOG_6             = 0xF606;
 public static final int STATUS_ANALOG_7             = 0xF607;   // 62983
 // Description:
 //      Analog sensor value
 // Notes:
 //      - Client should include an Analog value in the event packet.

 public static final int STATUS_ANALOG_RANGE_0       = 0xF620;   // 63008
 public static final int STATUS_ANALOG_RANGE_1       = 0xF621;
 public static final int STATUS_ANALOG_RANGE_2       = 0xF622;
 public static final int STATUS_ANALOG_RANGE_3       = 0xF623;
 public static final int STATUS_ANALOG_RANGE_4       = 0xF624;
 public static final int STATUS_ANALOG_RANGE_5       = 0xF625;
 public static final int STATUS_ANALOG_RANGE_6       = 0xF626;
 public static final int STATUS_ANALOG_RANGE_7       = 0xF627;   // 63015
 // Description:
 //      Analog sensor value out-of-range violation
 // Notes:
 //      - Client should include an Analog value in the event packet.

 public static final int STATUS_HUMIDITY_LOW_0       = 0xF660;   // 63072
 // ...                                              = 0xF66F
 // Description:
 //      Humidity drop below lower range

 public static final int STATUS_HUMIDITY_HIGH_0      = 0xF670;   // 63088
 // ...                                              = 0xF67F
 // Description:
 //      Humidity rise above higher range

 public static final int STATUS_HUMIDITY_RANGE_0     = 0xF680;   // 63104
 // ...                                              = 0xF68F
 // Description:
 //      Humidity out of range

 public static final int STATUS_PRESSURE_LOW_0       = 0xF6A0;   // 63136
 // ...                                              = 0xF6AF
 // Description:
 //      Pressure drop below lower range

 public static final int STATUS_PRESSURE_HIGH_0      = 0xF6B0;   // 63152
 // ...                                              = 0xF6BF
 // Description:
 //      Pressure rise above higher range

 public static final int STATUS_PRESSURE_RANGE_0     = 0xF6C0;   // 63168
 // ...                                              = 0xF6CF
 // Description:
 //      Pressure out of range

//----------------------------------------------------------------------------
//Temperature sensor values (extra data): 0xF700 to 0xF7FF

 public static final int STATUS_TEMPERATURE_0        = 0xF710;   // 63248
 public static final int STATUS_TEMPERATURE_1        = 0xF711;
 public static final int STATUS_TEMPERATURE_2        = 0xF712;
 public static final int STATUS_TEMPERATURE_3        = 0xF713;
 public static final int STATUS_TEMPERATURE_4        = 0xF714;
 public static final int STATUS_TEMPERATURE_5        = 0xF715;
 public static final int STATUS_TEMPERATURE_6        = 0xF716;
 public static final int STATUS_TEMPERATURE_7        = 0xF717;   // 63255
 // Description:
 //      Temperature value

 public static final int STATUS_TEMPERATURE_RANGE_0  = 0xF730;   // 63280
 public static final int STATUS_TEMPERATURE_RANGE_1  = 0xF731;
 public static final int STATUS_TEMPERATURE_RANGE_2  = 0xF732;
 public static final int STATUS_TEMPERATURE_RANGE_3  = 0xF733;
 public static final int STATUS_TEMPERATURE_RANGE_4  = 0xF734;
 public static final int STATUS_TEMPERATURE_RANGE_5  = 0xF735;
 public static final int STATUS_TEMPERATURE_RANGE_6  = 0xF736;
 public static final int STATUS_TEMPERATURE_RANGE_7  = 0xF737;   // 63287
 // Description:
 //      Temperature value out-of-range [low/high/average]

 public static final int STATUS_TEMPERATURE_LOW_0    = 0xF740;   // 63296
 // Description:
 //      Temperature drop below lower range

 public static final int STATUS_TEMPERATURE_HIGH_0   = 0xF750;   // 63312
 // Description:
 //      Temperature exceeded higher range

 public static final int STATUS_TEMPERATURE_OK       = 0xF7F0;   // 63472
 // Description:
 //      All temperature averages [aver/aver/aver/...]

 public static final int STATUS_TEMPERATURE          = 0xF7F1;   // 63473
 // Description:
 //      All temperature averages [aver/aver/aver/...]

//----------------------------------------------------------------------------
//Miscellaneous

 public static final int STATUS_LOGIN                = 0xF811;   // 63505
 // Description:
 //      Generic 'login'

 public static final int STATUS_LOGOUT               = 0xF812;   // 63506
 // Description:
 //      Generic 'logout'

 // --------------------------------

 public static final int STATUS_ARMED                = 0xF817;   // 63511
 // Description:
 //      Generic 'armed'

 public static final int STATUS_DISARMED             = 0xF818;   // 63512
 // Description:
 //      Generic 'disarmed'

 // --------------------------------

 public static final int STATUS_TAG_BATTERY_LOW      = 0xF81D;   // 63517
 // Description:
 //      General RFID tag battery low

 // --------------------------------

 public static final int STATUS_ENTITY_STATE         = 0xF820;   // 63520
 // Description:
 //      General Entity state

 public static final int STATUS_ENTITY_CONNECT       = 0xF821;   // 63521
 // Description:
 //      General Entity Connect/Hook/On

 public static final int STATUS_ENTITY_DISCONNECT    = 0xF822;   // 63522
 // Description:
 //      General Entity Disconnect/Drop/Off

 public static final int STATUS_ENTITY_INVENTORY     = 0xF823;   // 63523
 // Description:
 //      General Entity Inventory

 // --------------------------------

 public static final int STATUS_TRAILER_STATE        = 0xF824;   // 63524
 // Description:
 //      Trailer State change

 public static final int STATUS_TRAILER_HOOK         = 0xF825;   // 63525
 // Description:
 //      Trailer Hook

 public static final int STATUS_TRAILER_UNHOOK       = 0xF826;   // 63526
 // Description:
 //      Trailer Unhook

 public static final int STATUS_TRAILER_INVENTORY    = 0xF827;   // 63527
 // Description:
 //      Trailer Inventory

 // --------------------------------

 public static final int STATUS_RFID_STATE           = 0xF828;   // 63528
 // Description:
 //      RFID State change

 public static final int STATUS_RFID_CONNECT         = 0xF829;   // 63529
 // Description:
 //      RFID Connect/InRange

 public static final int STATUS_RFID_DISCONNECT      = 0xF82A;   // 63530
 // Description:
 //      RFID Disconnect/OutOfRange

 public static final int STATUS_RFID_INVENTORY       = 0xF82B;   // 63531
 // Description:
 //      RFID Inventory
 
 // --------------------------------

 public static final int STATUS_PERSON_ENTER         = 0xF82C;   // 63532
 // Description:
 //      Passenger/Person Enter/Embark

 public static final int STATUS_PERSON_EXIT          = 0xF82D;   // 63533
 // Description:
 //      Passenger/Person Exit/Disembark

 public static final int STATUS_PERSON_INVENTORY     = 0xF82E;   // 63534
 // Description:
 //      Passenger/Person Inventory

 public static final int STATUS_PERSON_STATE         = 0xF82F;   // 63535
 // Description:
 //      Passenger/Person State change

 // --------------------------------

 public static final int STATUS_ACK                  = 0xF831;   // 63537
 // Description:
 //      Acknowledge

 public static final int STATUS_NAK                  = 0xF832;   // 63538
 // Description:
 //      Negative Acknowledge

 // --------------------------------

 public static final int STATUS_COMMAND_ACK          = 0xF833;   // 63539
 // Description:
 //      General Command Acknowledge

 public static final int STATUS_COMMAND_NAK          = 0xF834;   // 63540
 // Description:
 //      General Command Negative Acknowledge

 // --------------------------------

 public static final int STATUS_DUTY_ON              = 0xF837;   // 63543
 // Description:
 //      Duty condition activated

 public static final int STATUS_DUTY_OFF             = 0xF838;   // 63544
 // Description:
 //      Duty condition deactivated

 // --------------------------------

 public static final int STATUS_PANIC_ON             = 0xF841;   // 63553
 // Description:
 //      Panic/SOS condition activated

 public static final int STATUS_PANIC_OFF            = 0xF842;   // 63554
 // Description:
 //      Panic/SOS condition deactivated

 // --------------------------------

 public static final int STATUS_PTT_ON               = 0xF843;   // 63555
 // Description:
 //      Push-To-Talk ON

 public static final int STATUS_PTT_OFF              = 0xF844;   // 63556
 // Description:
 //      Push-To-Talk OFF

 // --------------------------------

 public static final int STATUS_ALARM_ON             = 0xF847;   // 63559
 // Description:
 //      General Alarm condition activated

 public static final int STATUS_ALARM_OFF            = 0xF848;   // 63560
 // Description:
 //      General Alarm condition deactivated

 // --------------------------------

 public static final int STATUS_SENSOR_ON            = 0xF84B;   // 63563
 // Description:
 //      sensor activated

 public static final int STATUS_SENSOR_OFF           = 0xF84C;   // 63564
 // Description:
 //      sensor deactivated

 // --------------------------------

 public static final int STATUS_ASSIST_ON            = 0xF851;   // 63569
 // Description:
 //      Assist condition activated

 public static final int STATUS_ASSIST_OFF           = 0xF852;   // 63570
 // Description:
 //      Assist condition deactivated

 // --------------------------------

 public static final int STATUS_MANDOWN_ON           = 0xF855;   // 63573
 // Description:
 //      man-down activated

 public static final int STATUS_MANDOWN_OFF          = 0xF856;   // 63574
 // Description:
 //      man-down deactivated

 // --------------------------------

 public static final int STATUS_MEDICAL_ON           = 0xF861;   // 63585
 // Description:
 //      Medical Call condition activated

 public static final int STATUS_MEDICAL_OFF          = 0xF862;   // 63586
 // Description:
 //      Medical Call condition deactivated

 // --------------------------------

 public static final int STATUS_DRIVER_AUTHORIZED    = 0xF866;   // 63590
 // Description:
 //      driver authorized

 public static final int STATUS_DRIVER_UNAUTHORIZED  = 0xF867;   // 63591
 // Description:
 //      driver unauthorized

 public static final int STATUS_DRIVER_FATIGUE       = 0xF868;   // 63592
 // Description:
 //      driver fatigued

 public static final int STATUS_DRIVER_SLEEP         = 0xF869;   // 63593
 // Description:
 //      driver sleep

 public static final int STATUS_DRIVER_WAKE          = 0xF86A;   // 63594
 // Description:
 //      driver wake

 // --------------------------------

 public static final int STATUS_TOWING_START         = 0xF871;   // 63601
 // Description:
 //      Vehicle started to be towed

 public static final int STATUS_TOWING_STOP          = 0xF872;   // 63602
 // Description:
 //      Vehicle stopped being towed

 public static final int STATUS_TOWING_ENROUTE       = 0xF873;   // 63603
 // Description:
 //      Vehicle enroute while being towed

 // --------------------------------

 public static final int STATUS_INTRUSION_ON         = 0xF881;   // 63617
 // Description:
 //      Intrusion detected

 public static final int STATUS_INTRUSION_OFF        = 0xF882;   // 63618
 // Description:
 //      Intrusion stopped

 // --------------------------------

 public static final int STATUS_TAMPER_ON            = 0xF885;   // 63621
 // Description:
 //      Tamper detected

 public static final int STATUS_TAMPER_OFF           = 0xF886;   // 63622
 // Description:
 //      Tamper stopped

 // --------------------------------

 public static final int STATUS_BREACH_ON            = 0xF889;   // 63625
 // Description:
 //      Breach detected

 public static final int STATUS_BREACH_OFF           = 0xF88A;   // 63626
 // Description:
 //      Breach stopped

 // --------------------------------

 public static final int STATUS_CLASP_ON             = 0xF88B;   // 63627
 // Description:
 //      Clasp/Strap/Connector on

 public static final int STATUS_CLASP_OFF            = 0xF88C;   // 63628
 // Description:
 //      Clasp/Strap/Connector off

 // --------------------------------

 public static final int STATUS_SAFETY_ON            = 0xF88D;   // 63629
 // Description:
 //      Safety on

 public static final int STATUS_SAFETY_OFF           = 0xF88E;   // 63630
 // Description:
 //      Safety off

 // --------------------------------

 public static final int STATUS_VIBRATION_ON         = 0xF891;   // 63633
 // Description:
 //      Vibration on

 public static final int STATUS_VIBRATION_OFF        = 0xF892;   // 63634
 // Description:
 //      Vibration off

 // --------------------------------

 public static final int STATUS_DOOR_LOCK            = 0xF895;   // 63637
 // Description:
 //      Door lock

 public static final int STATUS_DOOR_UNLOCK          = 0xF896;   // 63638
 // Description:
 //      Door unlock

 // --------------------------------

 public static final int STATUS_PTO_ON               = 0xF899;   // 63641
 // Description:
 //      PTO on

 public static final int STATUS_PTO_OFF              = 0xF89A;   // 63642
 // Description:
 //      PTO off

 // --------------------------------

 public static final int STATUS_ONLINE               = 0xF89D;   // 63645
 // Description:
 //      Online

 public static final int STATUS_OFFLINE              = 0xF89E;   // 63646
 // Description:
 //      Offline

 // --------------------------------

 public static final int STATUS_LIGHTING_CHANGED     = 0xF8A0;   // 63648
 // Description:
 //      Light detection changed

 public static final int STATUS_LIGHTING_BRIGHTER    = 0xF8A3;   // 63651
 // Description:
 //      Dark to Light

 public static final int STATUS_LIGHTING_DARKER      = 0xF8A6;   // 63654
 // Description:
 //      Dark to Light

//----------------------------------------------------------------------------
//Carjacking status: 0xF8B0 to 0xF8BF

 public static final int STATUS_CARJACK_DISABLED     = 0xF8B0;   // 63664 [01]
 // Description:
 //      Cajack detection disabled

 public static final int STATUS_CARJACK_ENABLED      = 0xF8B1;   // 63665
 // Description:
 //      Cajack detection enabled

 public static final int STATUS_CARJACK_STANDBY      = 0xF8B2;   // 63666
 // Description:
 //      Cajack detection stand-by

 public static final int STATUS_CARJACK_ARMED        = 0xF8B3;   // 63667 [02]
 // Description:
 //      Cajack detection armed - possible carjack in progress

 public static final int STATUS_CARJACK_TRIGGERED    = 0xF8B5;   // 63669 [03]
 // Description:
 //      Cajack triggered - carjack in progress

 public static final int STATUS_CARJACK_CANCELLED    = 0xF8B7;   // 63671 [10]
//public static final int STATUS_CARJACK_CANCELLED    = 0xF8B8;   // [20]
//public static final int STATUS_CARJACK_CANCELLED    = 0xF8BA;   // [30]
//public static final int STATUS_CARJACK_CANCELLED    = 0xF8BC;   // [40]
 // Description:
 //      Cajack action cancelled

 public static final int STATUS_VEHICLE_DISABLED     = 0xF8C0;   // 63680
 // Description:
 //      Vehicle disabled

 public static final int STATUS_VEHICLE_ENABLED      = 0xF8C1;   // 63681
 // Description:
 //      Vehicle enabled

//----------------------------------------------------------------------------
//Entity status: 0xF8E0 to 0xF8FF

//----------------------------------------------------------------------------
//OBC/J1708/CANBUS status: 0xF900 to 0xF9FF

 public static final int STATUS_OBD_INFO_0           = 0xF900;   // 
 public static final int STATUS_OBD_INFO_1           = 0xF901;
 public static final int STATUS_OBD_INFO_2           = 0xF902;
 public static final int STATUS_OBD_INFO_3           = 0xF903;
 public static final int STATUS_OBD_INFO_4           = 0xF904;   // 
 public static final int STATUS_OBD_INFO_5           = 0xF905;   // 
 public static final int STATUS_OBD_INFO_6           = 0xF906;   // 
 public static final int STATUS_OBD_INFO_7           = 0xF907;   // 
 // Description:
 //      OBC/J1708 information packet

 public static final int STATUS_OBD_CONNECT          = 0xF90F;   // 63759
 // Description:
 //      OBD connected to vehicle

 public static final int STATUS_OBD_DISCONNECT       = 0xF910;   // 63760
 // Description:
 //      OBD disconnected from vehicle

 public static final int STATUS_OBD_FAULT            = 0xF911;   // 63761
 // Description:
 //      OBC/J1708 fault code occurred. (should be combined with DTC codes)

 public static final int STATUS_CHECK_ENGINE         = 0xF915;   // 63765
 public static final int STATUS_CHECK_ENGINE_ON      = STATUS_CHECK_ENGINE;
 // Description:
 //      Malfunction Indicator Lamp (MIL) turned ON

 public static final int STATUS_CHECK_ENGINE_OFF     = 0xF916;   // 63766
 // Description:
 //      Malfunction Indicator Lamp (MIL) turned OFF

 public static final int STATUS_OBD_RANGE            = 0xF920;   // 63776
 // Description:
 //      Generic OBC/J1708 value out-of-range

 public static final int STATUS_OBD_RPM_RANGE        = 0xF922;   // 63778
 // Description:
 //      OBC/J1708 RPM out-of-range

 public static final int STATUS_OBD_RPM_OK           = 0xF923;   // 63779
 // Description:
 //      OBC/J1708 RPM back in range

 public static final int STATUS_OBD_FUEL_RANGE       = 0xF924;   // 63780
 // Description:
 //      OBC/J1708 Fuel level out-of-range (ie. to low)
 // Notes:
 //      - This code can also be used to indicate possible fuel theft.

 public static final int STATUS_OBD_OIL_RANGE        = 0xF926;   // 63782
 // Description:
 //      OBC/J1708 Oil level out-of-range (ie. to low)

 public static final int STATUS_OBD_TEMP_RANGE       = 0xF928;   // 63784
 // Description:
 //      OBC/J1708 Temperature (engine/coolant) out-of-range

 public static final int STATUS_OBD_LOAD_RANGE       = 0xF92A;   // 63786
 // Description:
 //      OBC/J1708 Engine-Load out-of-range

 public static final int STATUS_OBD_COOLANT_RANGE    = 0xF92C;   // 63788
 // Description:
 //      OBC/J1708 Engine coolant level/temp out-of-range

 public static final int STATUS_OBD_COOLANT_OK       = 0xF92D;   // 63789
 // Description:
 //      OBC/J1708 Engine coolant level/temp normal/restored

 public static final int STATUS_HARSH_BEHAVIOR       = 0xF92E;   // 63790
 // Description:
 //      General Harsh behavior detected

 public static final int STATUS_EXCESS_BRAKING       = 0xF930;   // 63792
 public static final int STATUS_EXCESS_BRAKING_2     = 0xF931;   // 63793
 public static final int STATUS_EXCESS_BRAKING_3     = 0xF932;   // 63794
 public static final int STATUS_EXCESS_BRAKING_4     = 0xF933;   // 63795
 // Description:
 //      Excessive/Harsh deceleration detected

 public static final int STATUS_EXCESS_CORNERING     = 0xF937;   // 63799
 public static final int STATUS_EXCESS_CORNERING_2   = 0xF938;   // 63800
 public static final int STATUS_EXCESS_CORNERING_3   = 0xF939;   // 63801
 public static final int STATUS_EXCESS_CORNERING_4   = 0xF93A;   // 63802
 // Description:
 //      Excessive lateral acceleration detected
 //      Also called "hard turning", "veer alarm", "lateral acceleration"

 public static final int STATUS_IMPACT               = 0xF941;   // 63809
 public static final int STATUS_IMPACT_DATA_1        = 0xF942;   // 63810
 public static final int STATUS_IMPACT_DATA_2        = 0xF943;   // 63811
 public static final int STATUS_IMPACT_DATA_3        = 0xF944;   // 63812
 // Description:
 //      Excessive acceleration/deceleration detected

 public static final int STATUS_FREEFALL             = 0xF945;   // 63813
 // Description:
 //      Freefall detected

 public static final int STATUS_FUEL_REFILL          = 0xF951;   // 63825
 // Description:
 //      Fuel refill detected

 public static final int STATUS_FUEL_THEFT           = 0xF952;   // 63826
 // Description:
 //      Fuel theft detected

 public static final int STATUS_LOW_FUEL             = 0xF954;   // 63828
 // Description:
 //      Low fuel alert

 public static final int STATUS_FUEL_DIRTY           = 0xF95A;   // 63834
 // Description:
 //      Fuel contaminated/dirty

 public static final int STATUS_FUEL_SENSOR          = 0xF95E;   // 63838
 // Description:
 //      Fuel sensor failed/bad

 public static final int STATUS_EXCESS_ACCEL         = 0xF960;   // 63840
 public static final int STATUS_EXCESS_ACCEL_2       = 0xF961;   // 63841
 public static final int STATUS_EXCESS_ACCEL_3       = 0xF962;   // 63842
 // Description:
 //      Excessive acceleration detected

//----------------------------------------------------------------------------
//Device custom status

 public static final int STATUS_DAY_SUMMARY          = 0xFA00;   // 64000
 // Description:
 //      End-Of-Day Summary

 public static final int STATUS_TRIP_SUMMARY         = 0xFA40;   // 64064
 // Description:
 //      End-Of-Day Summary

//----------------------------------------------------------------------------
//Tire Pressure/Temperature

 public static final int STATUS_TIRE_TEMP_RANGE      = 0xFBA0;   // 64416
 // Description:
 //      Tire Temperature out-of-range

 public static final int STATUS_TIRE_PRESSURE_RANGE  = 0xFBB0;   // 64432
 // Description:
 //      Tire Pressure out-of-range

 public static final int STATUS_TIRE_PRESSURE_LOW    = 0xFBC0;   // 64448
 // Description:
 //      Tire Pressure low

 public static final int STATUS_TIRE_BATTERY_LOW     = 0xFBD0;   // 64464
 // Description:
 //      Tire sensor battery low

//----------------------------------------------------------------------------
//Internal device status

 public static final int STATUS_IP_ADDRESS           = 0xFD01;   // 64769
 // Description:
 //      IP Address changed

 public static final int STATUS_SIM_CARD             = 0xFD03;   // 64771
 // Description:
 //      SIM Card changed

 public static final int STATUS_LOW_VOLTAGE          = 0xFD06;   // 64774
 // Description:
 //      Generic Low voltage

 public static final int STATUS_HIGH_VOLTAGE         = 0xFD07;   // 64775
 // Description:
 //      Generic Low voltage

 public static final int STATUS_BATTERY_VOLTS        = 0xFD0A;   // 64778
 // Description:
 //      Battery voltage

 public static final int STATUS_BACKUP_VOLTS         = 0xFD0C;   // 64780
 // Description:
 //      Backup Battery voltage

 public static final int STATUS_BATT_CHARGE_ON       = 0xFD0E;   // 64782
 // Description:
 //      Battery charging on

 public static final int STATUS_BATT_CHARGE_OFF      = 0xFD0F;   // 64783
 // Description:
 //      Battery charging off

 public static final int STATUS_LOW_BATTERY          = 0xFD10;   // 64784  [BATTERY_LOW]
 // Description:
 //      Low battery indicator

 public static final int STATUS_BATTERY_LEVEL        = 0xFD11;   // 64785
 // Description:
 //      Battery indicator

 public static final int STATUS_POWER_FAILURE        = 0xFD13;   // 64787
 // Description:
 //      Power failure indicator (or running on internal battery)

 public static final int STATUS_POWER_ALARM          = 0xFD14;   // 64788
 // Description:
 //      Power alarm condition

 public static final int STATUS_POWER_RESTORED       = 0xFD15;   // 64789
 // Description:
 //      Power restored (after previous failure)

 public static final int STATUS_POWER_OFF            = 0xFD17;   // 64791
 // Description:
 //      Power failure indicator (or running on internal battery)

 public static final int STATUS_POWER_ON             = 0xFD19;   // 64793
 // Description:
 //      Power restored (after previous failure)

 public static final int STATUS_LOW_POWER_MODE       = 0xFD1B;   // 64795
 // Description:
 //      Low Power Mode

 public static final int STATUS_FULL_POWER_MODE      = 0xFD1C;   // 64796
 // Description:
 //      Normal Power Mode

 public static final int STATUS_GPS_OFF              = 0xFD1E;   // 64798
 // Description:
 //      GPS was turned off

 public static final int STATUS_GPS_ON               = 0xFD1F;   // 64799
 // Description:
 //      GPS was turned on

 public static final int STATUS_GPS_EXPIRED          = 0xFD21;   // 64801
 // Description:
 //      GPS fix expiration detected

 public static final int STATUS_GPS_FAILURE          = 0xFD22;   // 64802
 // Description:
 //      GPS receiver failure detected

 public static final int STATUS_GPS_ANTENNA_OPEN     = 0xFD23;   // 64803
 // Description:
 //      GPS antenna open detected

 public static final int STATUS_GPS_ANTENNA_SHORT    = 0xFD24;   // 64804
 // Description:
 //      GPS antenna open detected

 public static final int STATUS_GPS_JAMMING          = 0xFD25;   // 64805
 // Description:
 //      GPS receiver jamming detected

 public static final int STATUS_GPS_RESTORED         = 0xFD26;   // 64806
 // Description:
 //      GPS receiver restore detected

 public static final int STATUS_GPS_LOST             = 0xFD27;   // 64807
 // Description:
 //      GPS receiver unable to obtain fix

 public static final int STATUS_CALIBRATION_START    = 0xFD2A;   // 64810
 // Description:
 //      General Calibration start message

 public static final int STATUS_CALIBRATION_END      = 0xFD2B;   // 64811
 // Description:
 //      General Calibration complete message

 public static final int STATUS_CALIBRATION_FAILED   = 0xFD2C;   // 64812
 // Description:
 //      General Calibration failed message

 public static final int STATUS_DIAGNOSTIC           = 0xFD30;   // 64816
 // Description:
 //      General Diagnostic message

 public static final int STATUS_CONNECTION_FAILURE   = 0xFD31;   // 64817
 // Description:
 //      Modem/GPRS/CDMA Connection failure detected

 public static final int STATUS_CONNECTION_RESTORED  = 0xFD32;   // 64818
 // Description:
 //      Modem/GPRS/CDMA Connection restore detected

 public static final int STATUS_MODEM_FAILURE        = 0xFD33;   // 64819
 // Description:
 //      Modem failure detected

 public static final int STATUS_INTERNAL_FAILURE     = 0xFD35;   // 64821
 // Description:
 //      Internal failure detected

 public static final int STATUS_MODEM_JAMMING        = 0xFD39;   // 64825
 // Description:
 //      Modem detected jamming

 public static final int STATUS_MODEM_RESTORED       = 0xFD3A;   // 64826
 // Description:
 //      Modem no longer jamming

 public static final int STATUS_CONFIG_RESET         = 0xFD41;   // 64833
 // Description:
 //      Firmware/Configuration reset

 public static final int STATUS_CONFIG_START         = 0xFD42;   // 64834
 // Description:
 //      Firmware/Configuration update starting

 public static final int STATUS_CONFIG_COMPLETE      = 0xFD43;   // 64835
 // Description:
 //      Firmware/Configuration (OTA/FOTA) complete/finished 

 public static final int STATUS_CONFIG_FAILED        = 0xFD44;   // 64836
 // Description:
 //      Configuration failed

 public static final int STATUS_SHUTDOWN             = 0xFD45;   // 64837
 // Description:
 //      device shutdown

 public static final int STATUS_SHUTDOWN_CANCELLED   = 0xFD47;   // 64839
 // Description:
 //      device shutdown

 public static final int STATUS_SUSPEND              = 0xFD48;   // 64840
 // Description:
 //      device sleep/suspend

 public static final int STATUS_RESUME               = 0xFD4A;   // 64842
 // Description:
 //      device resume

 public static final int STATUS_ROAMING_ON           = 0xFD51;   // 64849
 // Description:
 //      modem roaming ON

 public static final int STATUS_ROAMING_OFF          = 0xFD52;   // 64850
 // Description:
 //      modem roaming OFF

 public static final int STATUS_ROAMING_UNKNOWN      = 0xFD53;   // 64851
 // Description:
 //      modem roaming unknown

//----------------------------------------------------------------------------
//General image attachments

 public static final int STATUS_IMAGE_0              = 0xFD60;   // 64864
 public static final int STATUS_IMAGE_1              = 0xFD61;   // 64865
 public static final int STATUS_IMAGE_2              = 0xFD62;   // 64866
 public static final int STATUS_IMAGE_3              = 0xFD63;   // 64867
 public static final int STATUS_IMAGE_4              = 0xFD64;   // 64868
 // Description:
 //      image attachment

 public static final int STATUS_IMAGE_LOC_0          = 0xFD70;   // 64880
 public static final int STATUS_IMAGE_LOC_1          = 0xFD71;   // 64881
 public static final int STATUS_IMAGE_LOC_2          = 0xFD72;   // 64882
 public static final int STATUS_IMAGE_LOC_3          = 0xFD73;   // 64883
 public static final int STATUS_IMAGE_LOC_4          = 0xFD74;   // 64884
 // Description:
 //      image location

//----------------------------------------------------------------------------
//General Rule trigger status

 public static final int STATUS_RULE_TRIGGER_0       = 0xFF00;   // 65280
 public static final int STATUS_RULE_TRIGGER_1       = 0xFF01;   // 65281
 public static final int STATUS_RULE_TRIGGER_2       = 0xFF02;   // 65282
 public static final int STATUS_RULE_TRIGGER_3       = 0xFF03;   // 65283
 public static final int STATUS_RULE_TRIGGER_4       = 0xFF04;   // 65284
 public static final int STATUS_RULE_TRIGGER_5       = 0xFF05;   // 65285
 public static final int STATUS_RULE_TRIGGER_6       = 0xFF06;   // 65286
 public static final int STATUS_RULE_TRIGGER_7       = 0xFF07;   // 65287
 // Description:
 //      General Rule trigger status

//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------

 /* GTS status codes for Input-On events */
 public static final int InputStatusCodes_ON[] = new int[] {
     StatusCodes.STATUS_INPUT_ON_00,
     StatusCodes.STATUS_INPUT_ON_01,
     StatusCodes.STATUS_INPUT_ON_02,
     StatusCodes.STATUS_INPUT_ON_03,
     StatusCodes.STATUS_INPUT_ON_04,
     StatusCodes.STATUS_INPUT_ON_05,
     StatusCodes.STATUS_INPUT_ON_06,
     StatusCodes.STATUS_INPUT_ON_07,
     StatusCodes.STATUS_INPUT_ON_08,
     StatusCodes.STATUS_INPUT_ON_09,
     StatusCodes.STATUS_INPUT_ON_10,
     StatusCodes.STATUS_INPUT_ON_11,
     StatusCodes.STATUS_INPUT_ON_12,
     StatusCodes.STATUS_INPUT_ON_13,
     StatusCodes.STATUS_INPUT_ON_14,
     StatusCodes.STATUS_INPUT_ON_15,
     StatusCodes.STATUS_INPUT_ON_16,
     StatusCodes.STATUS_INPUT_ON_17,
     StatusCodes.STATUS_INPUT_ON_18,
     StatusCodes.STATUS_INPUT_ON_19,
     StatusCodes.STATUS_INPUT_ON_20,
     StatusCodes.STATUS_INPUT_ON_21,
     StatusCodes.STATUS_INPUT_ON_22,
     StatusCodes.STATUS_INPUT_ON_23,
     StatusCodes.STATUS_INPUT_ON_24,
     StatusCodes.STATUS_INPUT_ON_25,
     StatusCodes.STATUS_INPUT_ON_26,
 };

 /* GTS status codes for Input-Off events */
 public static final int InputStatusCodes_OFF[] = new int[] {
     StatusCodes.STATUS_INPUT_OFF_00,
     StatusCodes.STATUS_INPUT_OFF_01,
     StatusCodes.STATUS_INPUT_OFF_02,
     StatusCodes.STATUS_INPUT_OFF_03,
     StatusCodes.STATUS_INPUT_OFF_04,
     StatusCodes.STATUS_INPUT_OFF_05,
     StatusCodes.STATUS_INPUT_OFF_06,
     StatusCodes.STATUS_INPUT_OFF_07,
     StatusCodes.STATUS_INPUT_OFF_08,
     StatusCodes.STATUS_INPUT_OFF_09,
     StatusCodes.STATUS_INPUT_OFF_10,
     StatusCodes.STATUS_INPUT_OFF_11,
     StatusCodes.STATUS_INPUT_OFF_12,
     StatusCodes.STATUS_INPUT_OFF_13,
     StatusCodes.STATUS_INPUT_OFF_14,
     StatusCodes.STATUS_INPUT_OFF_15,
     StatusCodes.STATUS_INPUT_OFF_16,
     StatusCodes.STATUS_INPUT_OFF_17,
     StatusCodes.STATUS_INPUT_OFF_18,
     StatusCodes.STATUS_INPUT_OFF_19,
     StatusCodes.STATUS_INPUT_OFF_20,
     StatusCodes.STATUS_INPUT_OFF_21,
     StatusCodes.STATUS_INPUT_OFF_22,
     StatusCodes.STATUS_INPUT_OFF_23,
     StatusCodes.STATUS_INPUT_OFF_24,
     StatusCodes.STATUS_INPUT_OFF_25,
     StatusCodes.STATUS_INPUT_OFF_26,
 };

 /**
 *** Gets the index of the specified DigitalInput status code, or "-1" if the 
 *** specified value does not represent a DigitalInput status code
 *** @param code The status code
 *** @return The DigitalInput status code index
 **/
 public static int GetDigitalInputIndex(int code)
 {
     switch (code) {
         // --
         case STATUS_INPUT_ON_00          :
         case STATUS_INPUT_OFF_00         :
             return 0;
         case STATUS_INPUT_ON_01          :
         case STATUS_INPUT_OFF_01         :
             return 1;
         case STATUS_INPUT_ON_02          :
         case STATUS_INPUT_OFF_02         :
             return 2;
         case STATUS_INPUT_ON_03          :
         case STATUS_INPUT_OFF_03         :
             return 3;
         case STATUS_INPUT_ON_04          :
         case STATUS_INPUT_OFF_04         :
             return 4;
         case STATUS_INPUT_ON_05          :
         case STATUS_INPUT_OFF_05         :
             return 5;
         case STATUS_INPUT_ON_06          :
         case STATUS_INPUT_OFF_06         :
             return 6;
         case STATUS_INPUT_ON_07          :
         case STATUS_INPUT_OFF_07         :
             return 7;
         case STATUS_INPUT_ON_08          :
         case STATUS_INPUT_OFF_08         :
             return 8;
         case STATUS_INPUT_ON_09          :
         case STATUS_INPUT_OFF_09         :
             return 9;
         case STATUS_INPUT_ON_10          :
         case STATUS_INPUT_OFF_10         :
             return 10;
         case STATUS_INPUT_ON_11          :
         case STATUS_INPUT_OFF_11         :
             return 11;
         case STATUS_INPUT_ON_12          :
         case STATUS_INPUT_OFF_12         :
             return 12;
         case STATUS_INPUT_ON_13          :
         case STATUS_INPUT_OFF_13         :
             return 13;
         case STATUS_INPUT_ON_14          :
         case STATUS_INPUT_OFF_14         :
             return 14;
         case STATUS_INPUT_ON_15          :
         case STATUS_INPUT_OFF_15         :
             return 15;
         case STATUS_INPUT_ON_16          :
         case STATUS_INPUT_OFF_16         :
             return 16;
         case STATUS_INPUT_ON_17          :
         case STATUS_INPUT_OFF_17         :
             return 17;
         case STATUS_INPUT_ON_18          :
         case STATUS_INPUT_OFF_18         :
             return 18;
         case STATUS_INPUT_ON_19          :
         case STATUS_INPUT_OFF_19         :
             return 19;
         case STATUS_INPUT_ON_20          :
         case STATUS_INPUT_OFF_20         :
             return 20;
         case STATUS_INPUT_ON_21          :
         case STATUS_INPUT_OFF_21         :
             return 21;
         case STATUS_INPUT_ON_22          :
         case STATUS_INPUT_OFF_22         :
             return 22;
         case STATUS_INPUT_ON_23          :
         case STATUS_INPUT_OFF_23         :
             return 23;
         case STATUS_INPUT_ON_24          :
         case STATUS_INPUT_OFF_24         :
             return 24;
         case STATUS_INPUT_ON_25          :
         case STATUS_INPUT_OFF_25         :
             return 25;
         case STATUS_INPUT_ON_26          :
         case STATUS_INPUT_OFF_26         :
             return 26;
         // --
         case STATUS_IGNITION_ON          :
         case STATUS_IGNITION_OFF         :
             return IGNITION_INPUT_INDEX;
         case STATUS_MOTION_START         :
         case STATUS_MOTION_STOP          :
             return IGNITION_START_STOP;
     }
     return -1;
 }

 // --------------

 /**
 *** Returns true if the status code represents an Ignition state
 *** @param code The status code
 *** @return True if the status code represents an Ignition state
 **/
 public static boolean IsIgnition(int code)
 {
     switch (code) {
         case STATUS_IGNITION_ON          :
         case STATUS_IGNITION_OFF         :
             return true;
     }
     return false;
 }

 // --------------

 /**
 *** Returns true if the status code represents a DigitalInput "on" state
 *** @param code The status code
 *** @return True if the status code represents an DigitalInput "on" state
 **/
 public static boolean IsDigitalInputOn(int code, boolean inclIgn)
 {

     /* check code */
     switch (code) {
         case STATUS_INPUT_STATE          :
             return true; // always true (since we don't know the actual state)
         case STATUS_IGNITION_ON          :
             return inclIgn;  // ignition is an explicit event type
         // --
         case STATUS_INPUT_ON             :
         case STATUS_INPUT_ON_00          :
         case STATUS_INPUT_ON_01          :
         case STATUS_INPUT_ON_02          :
         case STATUS_INPUT_ON_03          :
         case STATUS_INPUT_ON_04          :
         case STATUS_INPUT_ON_05          :
         case STATUS_INPUT_ON_06          :
         case STATUS_INPUT_ON_07          :
         case STATUS_INPUT_ON_08          :
         case STATUS_INPUT_ON_09          :
         case STATUS_INPUT_ON_10          :
         case STATUS_INPUT_ON_11          :
         case STATUS_INPUT_ON_12          :
         case STATUS_INPUT_ON_13          :
         case STATUS_INPUT_ON_14          :
         case STATUS_INPUT_ON_15          :
         case STATUS_INPUT_ON_16          :
         case STATUS_INPUT_ON_17          :
         case STATUS_INPUT_ON_18          :
         case STATUS_INPUT_ON_19          :
         case STATUS_INPUT_ON_20          :
         case STATUS_INPUT_ON_21          :
         case STATUS_INPUT_ON_22          :
         case STATUS_INPUT_ON_23          :
         case STATUS_INPUT_ON_24          :
         case STATUS_INPUT_ON_25          :
         case STATUS_INPUT_ON_26          :
             return true;
     }
     
     /* not a digital input */
     return false;
     
 }

 // --------------

 /**
 *** Returns true if the status code represents a DigitalInput "off" state
 *** @param code The status code
 *** @return True if the status code represents an DigitalInput "off" state
 **/
 public static boolean IsDigitalInputOff(int code, boolean inclIgn)
 {
     switch (code) {
         case STATUS_INPUT_STATE          :
             return true; // always true (since we don't know the actual state)
         case STATUS_IGNITION_OFF         :
             return inclIgn; // ignition is an explicit event type
         // --
         case STATUS_INPUT_OFF            :
         case STATUS_INPUT_OFF_00         :
         case STATUS_INPUT_OFF_01         :
         case STATUS_INPUT_OFF_02         :
         case STATUS_INPUT_OFF_03         :
         case STATUS_INPUT_OFF_04         :
         case STATUS_INPUT_OFF_05         :
         case STATUS_INPUT_OFF_06         :
         case STATUS_INPUT_OFF_07         :
         case STATUS_INPUT_OFF_08         :
         case STATUS_INPUT_OFF_09         :
         case STATUS_INPUT_OFF_10         :
         case STATUS_INPUT_OFF_11         :
         case STATUS_INPUT_OFF_12         :
         case STATUS_INPUT_OFF_13         :
         case STATUS_INPUT_OFF_14         :
         case STATUS_INPUT_OFF_15         :
         case STATUS_INPUT_OFF_16         :
         case STATUS_INPUT_OFF_17         :
         case STATUS_INPUT_OFF_18         :
         case STATUS_INPUT_OFF_19         :
         case STATUS_INPUT_OFF_20         :
         case STATUS_INPUT_OFF_21         :
         case STATUS_INPUT_OFF_22         :
         case STATUS_INPUT_OFF_23         :
         case STATUS_INPUT_OFF_24         :
         case STATUS_INPUT_OFF_25         :
         case STATUS_INPUT_OFF_26         :
             return true;
     }
     return false;
 }

 // --------------

 /**
 *** Returns true if the status code represents a DigitalInput code
 *** @param code     The status code
 *** @param inclIgn  True to include ignition state 
 *** @return True if the status code represents an DigitalInput code
 **/
 public static boolean IsDigitalInput(int code, boolean inclIgn)
 {
     return IsDigitalInputOn( code, inclIgn) || 
            IsDigitalInputOff(code, inclIgn);
 }

 /**
 *** Returns the DigitalInput status code for the specified index and state
 *** @param ndx    The DigitalInput index
 *** @param state  The DigitalInput state (true="on", false="off")
 *** @return The DigitalInput status code
 ***/
 public static int GetDigitalInputStatusCode(int ndx, boolean state)
 {
     if (ndx < 0) {
         return STATUS_NONE;
     } else
     if (ndx == IGNITION_INPUT_INDEX) {
         return state? STATUS_IGNITION_ON : STATUS_IGNITION_OFF;
     } else
     if (ndx == IGNITION_START_STOP) {
         return state? STATUS_MOTION_START : STATUS_MOTION_STOP;
     }
     // -- else
     switch (ndx) {
         case   0: return state? STATUS_INPUT_ON_00 : STATUS_INPUT_OFF_00;
         case   1: return state? STATUS_INPUT_ON_01 : STATUS_INPUT_OFF_01;
         case   2: return state? STATUS_INPUT_ON_02 : STATUS_INPUT_OFF_02;
         case   3: return state? STATUS_INPUT_ON_03 : STATUS_INPUT_OFF_03;
         case   4: return state? STATUS_INPUT_ON_04 : STATUS_INPUT_OFF_04;
         case   5: return state? STATUS_INPUT_ON_05 : STATUS_INPUT_OFF_05;
         case   6: return state? STATUS_INPUT_ON_06 : STATUS_INPUT_OFF_06;
         case   7: return state? STATUS_INPUT_ON_07 : STATUS_INPUT_OFF_07;
         case   8: return state? STATUS_INPUT_ON_08 : STATUS_INPUT_OFF_08;
         case   9: return state? STATUS_INPUT_ON_09 : STATUS_INPUT_OFF_09;
         case  10: return state? STATUS_INPUT_ON_10 : STATUS_INPUT_OFF_10;
         case  11: return state? STATUS_INPUT_ON_11 : STATUS_INPUT_OFF_11;
         case  12: return state? STATUS_INPUT_ON_12 : STATUS_INPUT_OFF_12;
         case  13: return state? STATUS_INPUT_ON_13 : STATUS_INPUT_OFF_13;
         case  14: return state? STATUS_INPUT_ON_14 : STATUS_INPUT_OFF_14;
         case  15: return state? STATUS_INPUT_ON_15 : STATUS_INPUT_OFF_15;
         case  16: return state? STATUS_INPUT_ON_16 : STATUS_INPUT_OFF_16;
         case  17: return state? STATUS_INPUT_ON_17 : STATUS_INPUT_OFF_17;
         case  18: return state? STATUS_INPUT_ON_18 : STATUS_INPUT_OFF_18;
         case  19: return state? STATUS_INPUT_ON_19 : STATUS_INPUT_OFF_19;
         case  20: return state? STATUS_INPUT_ON_20 : STATUS_INPUT_OFF_20;
         case  21: return state? STATUS_INPUT_ON_21 : STATUS_INPUT_OFF_21;
         case  22: return state? STATUS_INPUT_ON_22 : STATUS_INPUT_OFF_22;
         case  23: return state? STATUS_INPUT_ON_23 : STATUS_INPUT_OFF_23;
         case  24: return state? STATUS_INPUT_ON_24 : STATUS_INPUT_OFF_24;
         case  25: return state? STATUS_INPUT_ON_25 : STATUS_INPUT_OFF_25;
         case  26: return state? STATUS_INPUT_ON_26 : STATUS_INPUT_OFF_26;
     }
     return STATUS_NONE;
 }

 // ------------------------------------------------------------------------

 /* GTS status codes for Output-On events */
 public static final int OutputStatusCodes_ON[] = new int[] {
     StatusCodes.STATUS_OUTPUT_ON_00,
     StatusCodes.STATUS_OUTPUT_ON_01,
     StatusCodes.STATUS_OUTPUT_ON_02,
     StatusCodes.STATUS_OUTPUT_ON_03,
     StatusCodes.STATUS_OUTPUT_ON_04,
     StatusCodes.STATUS_OUTPUT_ON_05,
     StatusCodes.STATUS_OUTPUT_ON_06,
     StatusCodes.STATUS_OUTPUT_ON_07,
     StatusCodes.STATUS_OUTPUT_ON_08,
     StatusCodes.STATUS_OUTPUT_ON_09,
 };

 /* GTS status codes for Output-Off events */
 public static final int OutputStatusCodes_OFF[] = new int[] {
     StatusCodes.STATUS_OUTPUT_OFF_00,
     StatusCodes.STATUS_OUTPUT_OFF_01,
     StatusCodes.STATUS_OUTPUT_OFF_02,
     StatusCodes.STATUS_OUTPUT_OFF_03,
     StatusCodes.STATUS_OUTPUT_OFF_04,
     StatusCodes.STATUS_OUTPUT_OFF_05,
     StatusCodes.STATUS_OUTPUT_OFF_06,
     StatusCodes.STATUS_OUTPUT_OFF_07,
     StatusCodes.STATUS_OUTPUT_OFF_08,
     StatusCodes.STATUS_OUTPUT_OFF_09,
 };

 /**
 *** Returns the DigitalOutput status code for the specified index and state
 *** @param ndx    The DigitalOutput index
 *** @param state  The DigitalOutput state (true="on", false="off")
 *** @return The DigitalOutput status code
 ***/
 public static int GetDigitalOutputStatusCode(int ndx, boolean state)
 {
     if (ndx < 0) {
         return STATUS_NONE;
     }
     switch (ndx) {
         case   0: return state? STATUS_OUTPUT_ON_00 : STATUS_OUTPUT_OFF_00;
         case   1: return state? STATUS_OUTPUT_ON_01 : STATUS_OUTPUT_OFF_01;
         case   2: return state? STATUS_OUTPUT_ON_02 : STATUS_OUTPUT_OFF_02;
         case   3: return state? STATUS_OUTPUT_ON_03 : STATUS_OUTPUT_OFF_03;
         case   4: return state? STATUS_OUTPUT_ON_04 : STATUS_OUTPUT_OFF_04;
         case   5: return state? STATUS_OUTPUT_ON_05 : STATUS_OUTPUT_OFF_05;
         case   6: return state? STATUS_OUTPUT_ON_06 : STATUS_OUTPUT_OFF_06;
         case   7: return state? STATUS_OUTPUT_ON_07 : STATUS_OUTPUT_OFF_07;
         case   8: return state? STATUS_OUTPUT_ON_08 : STATUS_OUTPUT_OFF_08;
         case   9: return state? STATUS_OUTPUT_ON_09 : STATUS_OUTPUT_OFF_09;
     }
     return STATUS_NONE;
 }

 // ------------------------------------------------------------------------

 /**
 *** Returns true if the status code represents an Analog code
 *** @param code The status code
 *** @return True if the status code represents an Analog code
 **/
 public static boolean IsAnalog(int code)
 {
     switch (code) {
         case STATUS_ANALOG_0 :
         case STATUS_ANALOG_1 :
         case STATUS_ANALOG_2 :
         case STATUS_ANALOG_3 :
         case STATUS_ANALOG_4 :
         case STATUS_ANALOG_5 :
         case STATUS_ANALOG_6 :
         case STATUS_ANALOG_7 :
             return true;
         case STATUS_ANALOG_RANGE_0:
         case STATUS_ANALOG_RANGE_1:
         case STATUS_ANALOG_RANGE_2:
         case STATUS_ANALOG_RANGE_3:
         case STATUS_ANALOG_RANGE_4:
         case STATUS_ANALOG_RANGE_5:
         case STATUS_ANALOG_RANGE_6:
         case STATUS_ANALOG_RANGE_7:
             return true;
     }
     return false;
 }

 /**
 *** Returns the Analog status code for the specified index
 *** @param ndx    The Analog index
 *** @return The Analog status code
 ***/
 public static int GetAnalogStatusCode(int ndx, boolean state)
 {
     if (ndx < 0) {
         return STATUS_NONE;
     }
     switch (ndx) {
         case   0: return STATUS_ANALOG_0;
         case   1: return STATUS_ANALOG_1;
         case   2: return STATUS_ANALOG_2;
         case   3: return STATUS_ANALOG_3;
         case   4: return STATUS_ANALOG_4;
         case   5: return STATUS_ANALOG_5;
         case   6: return STATUS_ANALOG_6;
         case   7: return STATUS_ANALOG_7;
     }
     return STATUS_NONE;
 }

 // ------------------------------------------------------------------------

 /**
 *** Returns true if the status code represents a RuleTrigger code
 *** @param code The status code
 *** @return True if the status code represents a RuleTrigger code
 **/
 public static boolean IsRuleTrigger(int code)
 {
     switch (code) {
         case STATUS_RULE_TRIGGER_0 :
         case STATUS_RULE_TRIGGER_1 :
         case STATUS_RULE_TRIGGER_2 :
         case STATUS_RULE_TRIGGER_3 :
         case STATUS_RULE_TRIGGER_4 :
         case STATUS_RULE_TRIGGER_5 :
         case STATUS_RULE_TRIGGER_6 :
         case STATUS_RULE_TRIGGER_7 :
             return true;
     }
     return false;
 }

 // ------------------------------------------------------------------------

 /**
 *** Returns true if the status code represents a Location code
 *** @param code The status code
 *** @return True if the status code represents a Location code
 **/
 public static boolean IsLocation(int code)
 {
     switch (code) {
         case STATUS_LOCATION   :
         case STATUS_LOCATION_1 :
         case STATUS_LOCATION_2 :
         case STATUS_LOCATION_3 :
         case STATUS_LOCATION_4 :
             return true;
     }
     return false;
 }
 
 /**
 *** Returns true if the specified status code can be discarded if another status-code
 *** event record has been saved.  (generally any very low priority status codes)
 *** @param code The status code
 *** @return True if the status code event can be discarded
 **/
 public static boolean IsDiscardable(int code)
 {
     // -- standard very low-priority status codes
     switch (code) {
         case STATUS_IGNORE          : // -1
         case STATUS_NONE            : //  0
         case STATUS_LOCATION        :
         case STATUS_LOCATION_1      :
         case STATUS_LOCATION_2      :
         case STATUS_LOCATION_3      :
         case STATUS_LOCATION_4      :
         case STATUS_MOTION_EN_ROUTE : // STATUS_MOTION_IN_MOTION
         case STATUS_MOTION_MOVING   :
         case STATUS_MOTION_HEADING  :
         case STATUS_HEARTBEAT       :
             return true; // discardable
     }
     // -- invalid status codes
     if (code <= 0) { // <= STATUS_NONE
         return true;
     }
     // -- non-discardable
     return false;
 }

 // ------------------------------------------------------------------------

 /**
 *** Returns true if the status code represents a Location code
 *** @param code The status code
 *** @return True if the status code represents a Location code
 **/
 public static boolean IsSpeeding(int code)
 {
     switch (code) {
         case STATUS_MOTION_OVER_SPEED_1 :
         case STATUS_MOTION_OVER_SPEED_2 :
         case STATUS_SPEEDING_BEGIN      :
         case STATUS_SPEEDING_LIMIT_1    :
         case STATUS_SPEEDING_LIMIT_2    :
         case STATUS_SPEEDING_LIMIT_3    :
         case STATUS_SPEEDING_LIMIT_4    :
       //case STATUS_SPEEDING_LIMIT_5    :
         case STATUS_SPEEDING_END        :
             return true;
     }
     return false;
 }

 // ------------------------------------------------------------------------

 /**
 *** Returns true if the status code represents a GeozoneTransition code
 *** @param code The status code
 *** @return True if the status code represents a GeozoneTransition code
 **/
 public static boolean IsGeozoneTransition(int code)
 {
     switch (code) {
         case STATUS_GEOFENCE_ARRIVE      :
         case STATUS_GEOFENCE_DEPART      :
             return true;
     }
     return false;
 }

 /**
 *** Returns true if the status code represents a GeozoneArrive code
 *** @param code The status code
 *** @return True if the status code represents a GeozoneArrive code
 **/
 public static boolean IsGeozoneArrive(int code)
 {
     switch (code) {
         case STATUS_GEOFENCE_ARRIVE      :
             return true;
     }
     return false;
 }

 /**
 *** Returns true if the status code represents a GeozoneDepart code
 *** @param code The status code
 *** @return True if the status code represents a GeozoneDepart code
 **/
 public static boolean IsGeozoneDepart(int code)
 {
     switch (code) {
         case STATUS_GEOFENCE_DEPART      :
             return true;
     }
     return false;
 }

 // ------------------------------------------------------------------------

 /**
 *** Returns true if the status code represents a EntityState code
 *** @param code The status code
 *** @return True if the status code represents a EntityState code
 **/
 public static boolean IsEntityState(int code)
 {
     switch (code) {
         case STATUS_ENTITY_STATE    :
         case STATUS_TRAILER_STATE   :
         case STATUS_RFID_STATE      :
         case STATUS_PERSON_STATE    :
             return true;
     }
     return false;
 }

 /**
 *** Returns true if the status code represents a EntityConnect code
 *** @param code The status code
 *** @return True if the status code represents a EntityConnect code
 **/
 public static boolean IsEntityConnect(int code)
 {
     switch (code) {
         case STATUS_ENTITY_CONNECT  :
         case STATUS_TRAILER_HOOK    :
         case STATUS_LOGIN           :
         case STATUS_RFID_CONNECT    :
         case STATUS_PERSON_ENTER    :
             return true;
     }
     return false;
 }

 /**
 *** Returns true if the status code represents a EntityDisconnect code
 *** @param code The status code
 *** @return True if the status code represents a EntityDisconnect code
 **/
 public static boolean IsEntityDisconnect(int code)
 {
     switch (code) {
         case STATUS_ENTITY_DISCONNECT:
         case STATUS_TRAILER_UNHOOK   :
         case STATUS_LOGOUT           :
         case STATUS_RFID_DISCONNECT  :
         case STATUS_PERSON_EXIT      :
             return true;
     }
     return false;
 }

 /**
 *** Returns true if the status code represents a EntityInventory code
 *** @param code The status code
 *** @return True if the status code represents a EntityInventory code
 **/
 public static boolean IsEntityInventory(int code)
 {
     switch (code) {
         case STATUS_ENTITY_INVENTORY :
         case STATUS_TRAILER_INVENTORY:
         case STATUS_RFID_INVENTORY   :
         case STATUS_PERSON_INVENTORY :
             return true;
     }
     return false;
 }

 // --------------

 /**
 *** Returns true if the status code represents a Acceleration state
 *** @param code The status code
 *** @return True if the status code represents an Acceleration state
 **/
 public static boolean IsAcceleration(int code)
 {
     switch (code) {
         case STATUS_MOTION_ACCELERATION:
         case STATUS_EXCESS_ACCEL       :
         case STATUS_EXCESS_ACCEL_2     :
         case STATUS_EXCESS_ACCEL_3     :
             return true;
     }
     return false;
 }

 /**
 *** Returns true if the status code represents a Deceleration state
 *** @param code The status code
 *** @return True if the status code represents an Deceleration state
 **/
 public static boolean IsDeceleration(int code)
 {
     switch (code) {
         case STATUS_MOTION_DECELERATION:
         case STATUS_EXCESS_BRAKING     :
         case STATUS_EXCESS_BRAKING_2   :
         case STATUS_EXCESS_BRAKING_3   :
         case STATUS_IMPACT             :
         case STATUS_IMPACT_DATA_1      :
         case STATUS_IMPACT_DATA_2      :
         case STATUS_IMPACT_DATA_3      :
             return true;
     }
     return false;
 }

 /**
 *** Returns true if the status code represents a Braking state
 *** @param code The status code
 *** @return True if the status code represents an Braking state
 **/
 public static boolean IsBraking(int code)
 {
     switch (code) {
         case STATUS_EXCESS_BRAKING     :
         case STATUS_EXCESS_BRAKING_2   :
         case STATUS_EXCESS_BRAKING_3   :
             return true;
     }
     return false;
 }

 /**
 *** Returns true if the status code represents a Cornering state
 *** @param code The status code
 *** @return True if the status code represents a Cornering state
 **/
 public static boolean IsCornering(int code)
 {
     switch (code) {
         case STATUS_EXCESS_CORNERING   :
         case STATUS_EXCESS_CORNERING_2 :
         case STATUS_EXCESS_CORNERING_3 :
             return true;
     }
     return false;
 }

 // ------------------------------------------------------------------------

 /**
 *** Returns true if the status code represents an image state
 *** @param code The status code
 *** @return True if the status code represents an image state
 **/
 public static boolean IsImage(int code)
 {
     switch (code) {
         case STATUS_IMAGE_0     :
         case STATUS_IMAGE_1     :
         case STATUS_IMAGE_2     :
         case STATUS_IMAGE_3     :
         case STATUS_IMAGE_4     :
             return true;
         case STATUS_IMAGE_LOC_0 :
         case STATUS_IMAGE_LOC_1 :
         case STATUS_IMAGE_LOC_2 :
         case STATUS_IMAGE_LOC_3 :
         case STATUS_IMAGE_LOC_4 :
             return true;
     }
     return false;
 }

 /**
 *** Returns the Image status code for the specified index and location state
 *** @param ndx    The Image index
 *** @param loc    The Image location state (true="Location", false="Non-Location")
 *** @return The Image status code
 ***/
 public static int GetImageStatusCode(int ndx, boolean loc)
 {
     if (ndx >= 0) {
         switch (ndx) {
             case 0: return loc? STATUS_IMAGE_LOC_0 : STATUS_IMAGE_0;
             case 1: return loc? STATUS_IMAGE_LOC_1 : STATUS_IMAGE_1;
             case 2: return loc? STATUS_IMAGE_LOC_2 : STATUS_IMAGE_2;
             case 3: return loc? STATUS_IMAGE_LOC_3 : STATUS_IMAGE_3;
             case 4: return loc? STATUS_IMAGE_LOC_4 : STATUS_IMAGE_4;
         }
     }
     return STATUS_NONE;
 }

 // ------------------------------------------------------------------------

 /* GFMI status codes for STOP_STATUS events */
 public static final int GFMI_StopStatus[] = new int[] {
     StatusCodes.STATUS_GFMI_STOP_STATUS_1,
     StatusCodes.STATUS_GFMI_STOP_STATUS_2,
     StatusCodes.STATUS_GFMI_STOP_STATUS_3,
     StatusCodes.STATUS_GFMI_STOP_STATUS_4,
 };

}


